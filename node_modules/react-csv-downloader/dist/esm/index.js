var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as FileSaver from 'file-saver';
import * as React from 'react';
import toCsv from './lib/csv';
export { toCsv };
export default class CsvDownload extends React.Component {
    constructor() {
        super(...arguments);
        this.handleClick = () => __awaiter(this, void 0, void 0, function* () {
            const { suffix, prefix, bom, extension, disabled, meta, separator } = this.props;
            if (disabled) {
                return;
            }
            let { filename } = this.props;
            const csv = yield toCsv(this.props);
            const bomCode = bom !== false ? '\ufeff' : '';
            const metaContent = meta ? `sep=${separator}\r\n` : '';
            const resolvedExtension = extension || '.csv';
            if (filename.indexOf(resolvedExtension) === -1) {
                filename += resolvedExtension;
            }
            if (suffix) {
                filename =
                    typeof suffix === 'string' || typeof suffix === 'number'
                        ? filename.replace(resolvedExtension, `_${suffix}${resolvedExtension}`)
                        : filename.replace(resolvedExtension, `_${new Date().getTime()}${resolvedExtension}`);
            }
            if (prefix) {
                filename =
                    typeof prefix === 'string' || typeof prefix === 'number'
                        ? `${prefix}_${filename}`
                        : `${new Date().getTime()}_${filename}`;
            }
            const blob = new Blob([`${bomCode}${metaContent}${csv}`], { type: 'text/csv;charset=utf-8' });
            FileSaver.saveAs(blob, filename);
        });
    }
    render() {
        const _a = this.props, { children, text, filename, suffix, prefix, bom, columns, datas, separator, noHeader, wrapColumnChar, newLineAtEnd, chunkSize, disabled } = _a, props = __rest(_a, ["children", "text", "filename", "suffix", "prefix", "bom", "columns", "datas", "separator", "noHeader", "wrapColumnChar", "newLineAtEnd", "chunkSize", "disabled"]);
        if (typeof children === 'undefined') {
            return (React.createElement("button", Object.assign({ type: "button" }, props, { onClick: this.handleClick, disabled: disabled }), text ? text : 'Download'));
        }
        return (React.createElement("div", Object.assign({ role: "button", tabIndex: 0 }, props, { onClick: this.handleClick, onKeyPress: this.handleClick }), children));
    }
}
//# sourceMappingURL=index.js.map